type Account = record { owner : principal; subaccount : opt blob };
type Error = variant {
  Overflow;
  InsufficientAllowance;
  InsufficientCollateral;
  ZeroAddress;
  AmountLessThanFee;
  TransferFailure;
  InsufficientBalance;
  PriceFormatError;
  BorrowLessThenCost;
  InvalidFee;
  UnderlyingNotEnable;
  Unauthorized;
  InvalidRate;
  NotExists;
  ExceedingLoanAmount;
  UnderlyingNotFound;
  Exists;
};
type InitArgs = record {
  timer_interval_secs : nat64;
  staking_pool : principal;
};
type Result = variant { Ok; Err : Error };
type Result_1 = variant { Ok : UnderlyingInfo; Err : Error };
type UnderlyingInfo = record {
  fee : nat;
  decimals : nat8;
  need_fee : nat;
  cost : nat;
  name : text;
  borrow : nat;
  deposit : nat;
  price : nat;
  fee_balance : nat;
  liquidate_rate : nat;
  enable : bool;
};
type UserAssetIdentify = record { user : principal; underlying : principal };
type UserInfo = record { balance : nat; borrow : nat };
service : (InitArgs) -> {
  account : () -> (Account) query;
  addUnderlying : (principal, bool, nat, nat, text, nat) -> (Result);
  allBalances : () -> (vec record { UserAssetIdentify; UserInfo }) query;
  balance : (principal, principal) -> (UserInfo) query;
  balances : (principal) -> (vec record { principal; UserInfo }) query;
  borrow : (principal, nat) -> (Result);
  burn : (nat) -> (Result);
  checkBorrow : () -> (nat);
  collateralInspection : () -> ();
  deposit : (principal, nat) -> (Result);
  excessive : () -> (nat) query;
  feeBalance : () -> (nat) query;
  getCustodian : () -> (vec principal) query;
  isCustodian : (principal) -> (bool) query;
  maxBorrow : (principal, principal) -> (nat) query;
  repayment : (principal, nat) -> (Result);
  setCUSD : (principal) -> (Result);
  setCustodian : (principal, bool) -> (Result);
  setMockPrice : (principal, nat) -> (Result);
  setReservePool : (principal) -> (Result);
  underlying : (principal) -> (Result_1) query;
  underlyingList : () -> (vec record { principal; UnderlyingInfo }) query;
  updatePrice : () -> (Result);
  withdraw : (principal, nat) -> (Result);
  withdrawCusdFee : (nat) -> (Result);
  withdrawFee : (nat) -> (Result);
  withdrawUnderlyingFee : (principal, nat) -> (Result);
  withdrawnCusdFee : () -> (nat) query;
}
